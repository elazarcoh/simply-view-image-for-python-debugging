name: Extension Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        node-version: [18, 20]
        exclude:
          # Reduce matrix size for faster CI
          - os: windows-latest
            python-version: '3.8'
          - os: windows-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.9'
          - os: ubuntu-latest
            node-version: 18
            python-version: '3.8'
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install Yarn dependencies
      run: yarn install --immutable

    - name: Lint code
      run: yarn lint

    - name: Setup Python test environment
      shell: bash
      run: |
        cd test
        python -m venv test-env
        if [ "$RUNNER_OS" == "Windows" ]; then
          source test-env/Scripts/activate
        else
          source test-env/bin/activate
        fi
        pip install --upgrade pip
        pip install numpy>=1.20.0 Pillow>=8.0.0 matplotlib>=3.3.0 plotly>=5.0.0
        # Install optional dependencies with error handling
        pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu || echo "PyTorch installation failed"
        pip install tensorflow>=2.8.0 || echo "TensorFlow installation failed"
        pip install scikit-image>=0.18.0 || echo "scikit-image installation failed"
        pip install opencv-python>=4.5.0 || echo "OpenCV installation failed"
        pip install imageio>=2.9.0 || echo "imageio installation failed"

    - name: Generate test data
      shell: bash
      run: |
        cd test
        if [ "$RUNNER_OS" == "Windows" ]; then
          source test-env/Scripts/activate
        else
          source test-env/bin/activate
        fi
        python test-data/generate_test_data.py

    - name: Build webview (if possible)
      run: yarn build:webview
      continue-on-error: true

    - name: Build extension
      run: yarn build:extension
      continue-on-error: true

    - name: Compile tests
      run: yarn compile-tests

    - name: Run tests (Ubuntu with xvfb)
      if: runner.os == 'Linux'
      run: xvfb-run -a yarn test:unit

    - name: Run tests (Windows/macOS)
      if: runner.os != 'Linux'
      run: yarn test:unit

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-python${{ matrix.python-version }}-node${{ matrix.node-version }}
        path: |
          test/out/
          test/test-data/test_metadata.json
          test/test-data/fixtures/

  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install --immutable

    - name: Lint
      run: yarn lint

    - name: Build for production
      run: yarn build:prod
      continue-on-error: true

    - name: Package extension
      run: yarn package
      continue-on-error: true

    - name: Upload VSIX
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: extension-vsix
        path: '*.vsix'

  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install --immutable

    - name: Audit dependencies
      run: yarn audit --level moderate
      continue-on-error: true

    - name: Check for known vulnerabilities
      run: |
        # Check package.json for any obvious security issues
        grep -i "password\|secret\|key\|token" package.json || echo "No obvious secrets in package.json"