name: Extension Tests

on:
  push:
    branches: ['*']
  pull_request:
    branches: ['*']

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: yarn

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      - name: Install Yarn dependencies
        run: yarn install --immutable

      - name: Lint code
        run: yarn lint

      - name: Cache python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('test/setup-python-env.sh') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # - name: Setup Python test environment
      #   run: yarn test:setup-python

      # - name: Generate test data
      #   run: yarn test:generate-data

      - name: Build webview
        run: yarn build:webview

      - name: Build extension
        run: yarn build:extension

      - name: Run tests with xvfb
        run: xvfb-run -a yarn test:compile && xvfb-run -a extest setup-and-run './out/tests/ui-test/*.test.js' -y --install_dependencies 'ms-python.python' --storage test-resources

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            out/tests/
            test-resources/settings/
            test-resources/*.json

      - name: Store UI test logs
        uses: actions/upload-artifact@v4
        if: failure() || cancelled()
        with:
          name: logs-ubuntu-latest
          path: |
            test-resources/settings/logs/*
            test-resources/*.log

      - name: Store UI Test screenshots
        uses: actions/upload-artifact@v4
        if: failure() || cancelled()
        with:
          name: screenshots-ubuntu-latest
          path: |
            test-resources/screenshots/*.png
            test-resources/**/*.png

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn

      - name: Install dependencies
        run: yarn install --immutable

      - name: Lint
        run: yarn lint

      - name: Build for production
        run: yarn build:prod

      - name: Package extension
        run: yarn package

      - name: Upload VSIX
        uses: actions/upload-artifact@v4
        with:
          name: extension-vsix
          path: '*.vsix'

  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn

      - name: Install dependencies
        run: yarn install --immutable

      - name: Audit dependencies
        run: yarn audit --level moderate
        continue-on-error: true

      - name: Check for known vulnerabilities
        run: |
          # Check package.json for any obvious security issues
          grep -i "password\|secret\|key\|token" package.json || \
            echo "No obvious secrets in package.json"

  check:
    if: always()
    runs-on: ubuntu-latest
    name: 🚦 Status Check
    needs: [test, build, security]
    steps:
      - name: ℹ️ Test Matrix Result
        run: |
          echo "Test result = ${{ needs.test.result }}"
          echo "Build result = ${{ needs.build.result }}"
          echo "Security result = ${{ needs.security.result }}"
      - name: ✅ Status Check - success
        if: >-
          ${{ needs.test.result == 'success' &&
              needs.build.result == 'success' &&
              (needs.security.result == 'success' ||
               needs.security.result == 'skipped') }}
        run: |
          echo "All tests successfully completed!"
          exit 0
      - name: ❌ Status Check - failure
        if: >-
          ${{ needs.test.result != 'success' ||
              needs.build.result != 'success' }}
        run: |
          echo "Status Check failed!"
          echo "Test result: ${{ needs.test.result }}"
          echo "Build result: ${{ needs.build.result }}"
          echo "Security result: ${{ needs.security.result }}"
          exit 1
